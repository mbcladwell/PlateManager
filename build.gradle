/* Plate Manager
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'idea'

    // Apply the application plugin to add support for building an application
    id 'application'
}

// Define the main class for the application
mainClassName = 'pm.Main'
version = '0.1'



dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
	//compile files("objectdb-2.7.5/bin/converter.jar")

	// PostgreSQL:
	compile(group: 'org.postgresql', name: 'postgresql', version: '42.2.5')

	//Help system
	compile 'javax.help:javahelp:2.0.05'
	implementation 'javax.help:javahelp:2.0.05'
compile 'javax.swing:jlfgr:1.0'
implementation 'javax.swing:jlfgr:1.0'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    //Apache project to access Office files
compile 'org.apache:poi:4.0.1'
implementation 'org.apache:poi:4.0.1'
compile 'org.apache:poi-ooxml:4.0.1'
    implementation 'org.apache:poi-ooxml:4.0.1'
compile 'org.apache.xmlbeans:xmlbeans:2.6.0'
    implementation 'org.apache.xmlbeans:xmlbeans:2.6.0'
compile  'org.apache.commons:commons-collections4:4.2'
implementation 'org.apache.commons:commons-collections4:4.2'
compile  'org.apache.commons:commons-compress:1.18'
implementation  'org.apache.commons:commons-compress:1.18'
// https://mvnrepository.com/artifact/org.apache.poi/ooxml-schemas
compile  'org.apache.poi:ooxml-schemas:1.4'
implementation   'org.apache.poi:ooxml-schemas:1.4'


       compile 'net.stihie:bllm:0.1'
    implementation 'net.stihie:bllm:0.1'
    compile 'javax.swing:jnlp:1.0'
    implementation 'javax.swing:jnlp:1.0'
    
//JSON parsing
compile 'com.google.code.gson:gson:2.8.5'

//QR code library
        compile 'com.google.zxing:core:3.3.3'
        implementation 'com.google.zxing:core:3.3.3'
        compile 'com.google.zxing:javase:3.3.3'
        implementation 'com.google.zxing:javase:3.3.3'
	
}



// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
//	maven {
  //  url 'http://m2.objectdb.com'
 // }
    mavenLocal()
    mavenCentral()


}


task showMeCache doLast{
  configurations.compile.each { println it }
}




task runAddProject(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  //classpath = src.test.java

  main = 'pm.DialogAddProjectTest'

  // arguments to pass to the application
  //args 'appArg1'
}



task runMain(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  //main = 'pm.DialogMainFrame'
  //classpath = src.test.java
  
  main = 'pm.Main'
    
  // arguments to pass to the application
  //args 'appArg1'
}


task printSourceSetOutputDir {
    doLast {
        println sourceSets.main.java.outputDir
    }
}


// psql -U postgres -h 192.168.1.7 -f ~/syncd/prog/plate-manager/pm/postgres/create_tables.sql


jar {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': 'Plate Manager',
                'Implementation-Version': version,
                'provider': 'gradle'
        )
    }
}



task initializePostgres(type:Exec) {

executable '/usr/bin/psql -U postgres -h 192.168.1.7'
args '-f ~/syncd/prog/plate-manager/pm/postgres/create_tables.sql'
outputs.upToDateWhen { false }


}


task refreshLicense(type: Copy) {
    from("/home/mbc/LitecoinLicenses/license/DkFzn23a")
    into(".")
    include("*.ser")
}


task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}


task copyJavaDocsToWeb(type: Copy, dependsOn: [myJavadocs]) {
   // from configurations.runtime
    from("build/docs/.")
    //into("/home/mbc/syncd/stihie/source/_posts/2018-08-09-bllmlkg")
    include('*.html', '*.js', '*.js')
    include('javadoc/**')
    
}


task getDeps(type: Exec) {
    configurations.testRuntime.files
    commandLine 'echo', 'Downloaded all dependencies'
}

//update the local Maven repository
task updateMaven(type: Exec)  {

        executable "mvn"
	args "install:install-file", "-Dfile=/home/mbc/Downloads/poi-bin-4.0.1-20181203/poi-4.0.1/poi-ooxml-4.0.1.jar", "-DgroupId=org.apache", "-DartifactId=poi-ooxml", "-Dversion=4.0.1", "-Dpackaging=jar"

//	args "install:install-file", "-Dfile=build/libs/pm-0.1.jar", "-DgroupId=net.stihie", "-DartifactId=pm", "-Dversion=0.1", "-Dpackaging=jar"

    
}

task testData(type: JavaExec){

    main= 'pm.'
    
}




task prep {
    doLast{

	exec{
	    commandLine 'git', 'pull'
	}
	exec{
	    workingDir '../postgres'
	    commandLine 'git', 'pull'
	    
	}
	exec{
	   workingDir '/home/mbc'
	//    commandLine 'gnome-terminal psql -U pm_admin -h 192.168.1.7 -d pmdb'
	    commandLine 'gnome-terminal', '--command=/usr/bin/psql -U pm_admin -h 192.168.1.7 -d pmdb'
	}
	//exec{
	  // workingDir '/home/mbc'
	   // commandLine 'psql','-Upm_admin', '-h192.168.1.7', '-dpmdb'
	//}
	exec{
	    commandLine 'gnome-terminal','--command=emacs &'
	}
   
    }
    
}
